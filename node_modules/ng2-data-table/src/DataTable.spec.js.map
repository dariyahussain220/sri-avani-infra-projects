{"version":3,"file":"DataTable.spec.js","sourceRoot":"","sources":["../../src/DataTable.spec.ts"],"names":[],"mappings":"","sourcesContent":["// // import {describe, it, expect, beforeEach, async} from \"@angular/core/testing\";\r\n// // import {} from 'jasmine';\r\n// import {SimpleChange} from \"@angular/core\";\r\n// import {DataTable} from \"./DataTable\";\r\n// import {RowSelector} from \"./RowSelector\";\r\n\r\n// describe(\"DataTable directive tests\", ()=> {\r\n//     let datatable: DataTable;\r\n\r\n//     beforeEach(()=> {\r\n//         datatable = new DataTable();\r\n//         datatable.inputData = [\r\n//             {\r\n//                 id: 3,\r\n//                 name: 'Poland'\r\n//             },\r\n//             {\r\n//                 id: 1,\r\n//                 name: 'Slovakia'\r\n//             },\r\n//             {\r\n//                 id: 2,\r\n//                 name: 'Czech'\r\n//             },\r\n//             {\r\n//                 id: 5,\r\n//                 name: 'Hungary'\r\n//             },\r\n//             {\r\n//                 id: 4,\r\n//                 name: 'Ukraine'\r\n//             },\r\n//             {\r\n//                 id: 6,\r\n//                 name: 'prune'   \r\n//             },\r\n//             {\r\n//                 id: 7,\r\n//                 name: 'player'\r\n//             }\r\n//         ];\r\n//     });\r\n\r\n//     describe(\"initializing\", ()=> {\r\n\r\n//         it(\"data should be empty array if inputData is undefined or null\", () => {\r\n//             let datatable = new DataTable();\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual([]);\r\n//         });\r\n\r\n//         it(\"data should be equal to inputData\", ()=> {\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual(datatable.inputData);\r\n//         });\r\n\r\n//         it(\"data should be 2 first items\", ()=> {\r\n//             datatable.rowsOnPage = 2;\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual([{\r\n//                 id: 3,\r\n//                 name: 'Poland'\r\n//             }, {\r\n//                 id: 1,\r\n//                 name: 'Slovakia'\r\n//             }]);\r\n//         });\r\n\r\n//         it(\"data should be 3. and 4. items\", ()=> {\r\n//             datatable.rowsOnPage = 2;\r\n//             datatable.activePage = 2;\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual([{\r\n//                 id: 2,\r\n//                 name: 'Czech'\r\n//             }, {\r\n//                 id: 5,\r\n//                 name: 'Hungary'\r\n//             }]);\r\n//         });\r\n\r\n//         it(\"shouldn't recalculate data when no changes\", ()=> {\r\n//             datatable.ngDoCheck();\r\n//             let data = datatable.data;\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toBe(data);\r\n//         });\r\n//     });\r\n\r\n//     describe(\"pagination\", ()=> {\r\n\r\n//         beforeEach(()=> {\r\n//             datatable.rowsOnPage = 2;\r\n//             datatable.ngDoCheck();\r\n//         });\r\n\r\n//         it(\"should return current page settings\", ()=> {\r\n//             expect(datatable.getPage()).toEqual({\r\n//                 activePage: 1,\r\n//                 rowsOnPage: 2,\r\n//                 dataLength: 5\r\n//             });\r\n//         });\r\n\r\n//         it(\"data should be 3. and 4. items when page change\", ()=> {\r\n//             datatable.setPage(2, 2);\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual([{\r\n//                 id: 2,\r\n//                 name: 'Czech'\r\n//             }, {\r\n//                 id: 5,\r\n//                 name: 'Hungary'\r\n//             }]);\r\n//         });\r\n\r\n//         it(\"data should be three first items when page change\", ()=> {\r\n//             datatable.setPage(1, 3);\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual([{\r\n//                 id: 3,\r\n//                 name: 'Poland'\r\n//             }, {\r\n//                 id: 1,\r\n//                 name: 'Slovakia'\r\n//             }, {\r\n//                 id: 2,\r\n//                 name: 'Czech'\r\n//             }]);\r\n//         });\r\n\r\n//         it(\"data should be two last items when page change\", ()=> {\r\n//             datatable.setPage(2, 3);\r\n//             datatable.setPage(2, 3);\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual([{\r\n//                 id: 5,\r\n//                 name: 'Hungary'\r\n//             }, {\r\n//                 id: 4,\r\n//                 name: 'Ukraine'\r\n//             }]);\r\n//         });\r\n//     });\r\n\r\n//     describe(\"sorting\", ()=> {\r\n\r\n//         it(\"id should return current sort setting\", () => {\r\n//             datatable.setSort(\"id\", \"desc\");\r\n//             expect(datatable.getSort()).toEqual({\r\n//                 sortBy: \"id\",\r\n//                 sortOrder: \"desc\"\r\n//             });\r\n//         });\r\n\r\n//         it(\"shouldn't refresh data when set page with same settings\", ()=> {\r\n//             datatable.setSort(\"name\", \"asc\");\r\n//             datatable.ngDoCheck();\r\n//             let data = datatable.data;\r\n//             datatable.setSort(\"name\", \"asc\");\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual(data);\r\n//         });\r\n\r\n//         it(\"should sort case insensitive data ascending by name\", ()=> {\r\n//             datatable.setSort(\"name\", \"asc\");\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual([\r\n//                 {\r\n//                     id: 2,\r\n//                     name: 'Czech'\r\n//                 },\r\n//                 {\r\n//                     id: 5,\r\n//                     name: 'Hungary'\r\n//                 },\r\n//                 {\r\n//                     id: 7,\r\n//                     name: 'player'\r\n//                 },\r\n//                 {\r\n//                     id: 3,\r\n//                     name: 'Poland'\r\n//                 },\r\n//                 {\r\n//                     id: 6,\r\n//                     name: 'prune'\r\n//                 },\r\n//                 {\r\n//                     id: 1,\r\n//                     name: 'Slovakia'\r\n//                 },\r\n//                 {\r\n//                     id: 4,\r\n//                     name: 'Ukraine'\r\n//                 }\r\n//             ])\r\n//         });\r\n//     });\r\n\r\n//     describe(\"row selecting\", ()=> {\r\n\r\n//         it(\"selected entities should only contain entities that are selected\", () => {\r\n//             let entities = datatable.inputData;\r\n//             datatable.ngDoCheck();\r\n\r\n//             let rowselectors = new Array<RowSelector>();\r\n//             entities.forEach(x => {\r\n//                 let rowSelector = new RowSelector(datatable);\r\n//                 rowSelector.entity = x;\r\n//                 rowselectors.push(rowSelector);\r\n//             });\r\n\r\n//             // Fake the interaction between the datatable directive\r\n//             // and rowselector component that would normally be\r\n//             // provided through angular2 template.\r\n//             rowselectors[0].onChange();\r\n//             datatable.addRemoveSelectedEntity(rowselectors[0].entity);\r\n//             rowselectors[1].onChange();\r\n//             datatable.addRemoveSelectedEntity(rowselectors[1].entity);\r\n//             rowselectors[0].onChange();\r\n//             datatable.addRemoveSelectedEntity(rowselectors[0].entity);\r\n\r\n//             expect(datatable.selectedEntities.length).toEqual(1);\r\n//         });\r\n\r\n//         it(\"should select all entities when all rows are selected\", () => {\r\n//             datatable.selectAllRows();\r\n//             expect(datatable.selectedEntities.length).toEqual(5);\r\n//         });\r\n\r\n//         it(\"should deselect all entities when all rows are deselected\", () => {\r\n//             datatable.selectAllRows();\r\n//             datatable.deselectAllRows();\r\n//             expect(datatable.selectedEntities.length).toEqual(0);\r\n//         });\r\n\r\n//     });\r\n\r\n//     describe(\"adding input data\", ()=> {\r\n\r\n//         it(\"should add a row of data to the table\", () => {\r\n//             let newData = {\r\n//                 id: 6,\r\n//                 name: 'United States'\r\n//             }\r\n//             datatable.ngDoCheck();\r\n//             datatable.inputData.push(newData);\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual([\r\n//                 {\r\n//                     id: 3,\r\n//                     name: 'Poland'\r\n//                 },\r\n//                 {\r\n//                     id: 1,\r\n//                     name: 'Slovakia'\r\n//                 },\r\n//                 {\r\n//                     id: 2,\r\n//                     name: 'Czech'\r\n//                 },\r\n//                 {\r\n//                     id: 5,\r\n//                     name: 'Hungary'\r\n//                 },\r\n//                 {\r\n//                     id: 4,\r\n//                     name: 'Ukraine'\r\n//                 },\r\n//                 {\r\n//                     id: 6,\r\n//                     name: 'United States'\r\n//                 }\r\n//             ])\r\n//         });\r\n\r\n//     });\r\n\r\n//     describe(\"removing input data\", ()=> {\r\n\r\n//         it(\"should remove a row of data from the table\", () => {\r\n//             datatable.ngDoCheck();\r\n//             datatable.inputData.pop();\r\n//             datatable.ngDoCheck();\r\n//             expect(datatable.data).toEqual([\r\n//                 {\r\n//                     id: 3,\r\n//                     name: 'Poland'\r\n//                 },\r\n//                 {\r\n//                     id: 1,\r\n//                     name: 'Slovakia'\r\n//                 },\r\n//                 {\r\n//                     id: 2,\r\n//                     name: 'Czech'\r\n//                 },\r\n//                 {\r\n//                     id: 5,\r\n//                     name: 'Hungary'\r\n//                 }\r\n//             ])\r\n//         });\r\n\r\n//     });\r\n// });\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}